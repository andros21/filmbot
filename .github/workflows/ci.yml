---
name: ci

"on":
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - LICENSE
      - README.md
      - fly.toml
      - '.gitignore'
      - '.github/workflows/*'
      - '.github/dependabot.yaml'
  pull_request:
    branches:
      - master
    paths-ignore:
      - LICENSE
      - README.md
      - fly.toml
      - '.gitignore'
      - '.github/workflows/*'
      - '.github/dependabot.yaml'

permissions:
  contents: read
  id-token: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: build filmbot
    runs-on: ubuntu-latest
    steps:
      - name: checkout project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: rust stable latest
        id: rust
        run: |
          latest="$(curl -sL https://api.github.com/repos/rust-lang/rust/releases/latest | jq -r .tag_name)"
          echo "rust stable latest: ${latest}"
          echo "stable_latest=${latest}" >> "$GITHUB_OUTPUT"
          used="$(cargo --version | awk '{print $2}')"
          echo "rust stable used: ${used}"
          echo "stable_used=${used}" >> "$GITHUB_OUTPUT"
      - name: check cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        id: cache
        with:
          path: |
            ~/.cargo/
            ~/.rustup/
            target/
          key: ${{ runner.os }}-rust-${{ steps.rust.outputs.stable_latest }}-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('Cargo.lock') }}
      - name: update toolchain
        if: steps.rust.outputs.stable_latest != steps.rust.outputs.stable_used
        run: |
          rustup update stable
      - name: cargo fmt
        run: |
          cargo fmt -- --check --verbose
      - name: cargo clippy
        run: |
          cargo clippy --locked --workspace
      - name: build filmbot
        run: |
          cargo build --release --locked
      - name: install cosign
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb
      - name: verify base images
        run: |
          cosign dockerfile verify \
            --certificate-identity \
            'https://github.com/chainguard-images/images/.github/workflows/release.yaml@refs/heads/main' \
            --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' \
            Dockerfile | jq .
      - name: docker buildx
        id: buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2
      - name: login ghcr.io
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
        with:
          images: ${{ env.IMAGE_NAME }}
      - name: build filmbot (devel)
        id: docker
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          push: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:devel
          labels: ${{ steps.meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          sbom: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
          provenance: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
          load: ${{ github.event_name == 'pull_request' }}
      - name: smoke test
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          set -x
          # only ensure runtime deps are ok
          docker run --rm \
            "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.docker.outputs.digest }}" &> filmbot.log || true
          cat filmbot.log
          grep --quiet --fixed-strings "TELOXIDE_TOKEN" filmbot.log
      - name: smoke test
        if: github.event_name == 'pull_request'
        run: |
          set -x
          # only ensure runtime deps are ok
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:devel &> filmbot.log || true
          cat filmbot.log
          grep --quiet --fixed-strings "TELOXIDE_TOKEN" filmbot.log
      - name: cosign filmbot
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          cosign sign -y "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.docker.outputs.digest }}"
      - name: install crane
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e
      - name: tag filmbot (latest)
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          crane tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:devel" latest
